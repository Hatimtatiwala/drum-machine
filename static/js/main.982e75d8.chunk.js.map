{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","display","setDisplay","useState","drumPads","keyTrigger","id","url","playSound","key","audio","document","getElementById","currentTime","play","pad","find","handleKeyPress","e","toUpperCase","useEffect","addEventListener","removeEventListener","React","createElement","className","map","onClick","src","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"0LA2DeA,MAxDf,WACE,MAAOC,EAASC,GAAcC,mBAAS,IAEjCC,EAAW,CACf,CAAEC,WAAY,IAAKC,GAAI,WAAYC,IAAK,4DACxC,CAAEF,WAAY,IAAKC,GAAI,WAAYC,IAAK,4DACxC,CAAEF,WAAY,IAAKC,GAAI,WAAYC,IAAK,4DACxC,CAAEF,WAAY,IAAKC,GAAI,WAAYC,IAAK,8DACxC,CAAEF,WAAY,IAAKC,GAAI,OAAQC,IAAK,4DACpC,CAAEF,WAAY,IAAKC,GAAI,UAAWC,IAAK,0DACvC,CAAEF,WAAY,IAAKC,GAAI,cAAeC,IAAK,8DAC3C,CAAEF,WAAY,IAAKC,GAAI,OAAQC,IAAK,8DACpC,CAAEF,WAAY,IAAKC,GAAI,YAAaC,IAAK,2DAGrCC,EAAaC,IACjB,MAAMC,EAAQC,SAASC,eAAeH,GACtC,GAAIC,EAAO,CACTA,EAAMG,YAAc,EACpBH,EAAMI,OACN,MAAMC,EAAMX,EAASY,KAAKD,GAAOA,EAAIV,aAAeI,GACpDP,EAAWa,EAAIT,MAIbW,EAAkBC,IACtBV,EAAUU,EAAET,IAAIU,gBAUlB,OAPAC,oBAAU,KACRT,SAASU,iBAAiB,UAAWJ,GAC9B,KACLN,SAASW,oBAAoB,UAAWL,KAEzC,IAGDM,IAAAC,cAAA,OAAKlB,GAAG,gBACNiB,IAAAC,cAAA,OAAKlB,GAAG,WAAWL,GACnBsB,IAAAC,cAAA,OAAKC,UAAU,iBACZrB,EAASsB,IAAIX,GACZQ,IAAAC,cAAA,OACEf,IAAKM,EAAIT,GACTmB,UAAU,WACVnB,GAAIS,EAAIT,GACRqB,QAASA,IAAMnB,EAAUO,EAAIV,aAE5BU,EAAIV,WACLkB,IAAAC,cAAA,SAAOC,UAAU,OAAOnB,GAAIS,EAAIV,WAAYuB,IAAKb,EAAIR,WCvClDsB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAd,EAAA,GAAAe,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAW/B,SAASC,eAAe,SACpD+B,OACHpB,IAAAC,cAACD,IAAMqB,WAAU,KACfrB,IAAAC,cAACxB,EAAG,QAOR6B","file":"static/js/main.982e75d8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [display, setDisplay] = useState('');\n\n  const drumPads = [\n    { keyTrigger: 'Q', id: 'Heater-1', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3' },\n    { keyTrigger: 'W', id: 'Heater-2', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3' },\n    { keyTrigger: 'E', id: 'Heater-3', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3' },\n    { keyTrigger: 'A', id: 'Heater-4', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3' },\n    { keyTrigger: 'S', id: 'Clap', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3' },\n    { keyTrigger: 'D', id: 'Open-HH', url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3' },\n    { keyTrigger: 'Z', id: \"Kick-n'-Hat\", url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3' },\n    { keyTrigger: 'X', id: 'Kick', url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3' },\n    { keyTrigger: 'C', id: 'Closed-HH', url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3' },\n  ];\n\n  const playSound = (key) => {\n    const audio = document.getElementById(key);\n    if (audio) {\n      audio.currentTime = 0;\n      audio.play();\n      const pad = drumPads.find(pad => pad.keyTrigger === key);\n      setDisplay(pad.id);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    playSound(e.key.toUpperCase());\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress);\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, []);\n\n  return (\n    <div id=\"drum-machine\">\n      <div id=\"display\">{display}</div>\n      <div className=\"pad-container\">\n        {drumPads.map(pad => (\n          <div\n            key={pad.id}\n            className=\"drum-pad\"\n            id={pad.id}\n            onClick={() => playSound(pad.keyTrigger)}\n          >\n            {pad.keyTrigger}\n            <audio className=\"clip\" id={pad.keyTrigger} src={pad.url}></audio>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}